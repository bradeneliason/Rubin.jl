Rubi/IntegrationRules/9 Miscellaneous/9.1 Integrand simplification rules.m:Int[-u_, x_Symbol] := Identity[-1]*Int[u, x]
Rubi/IntegrationRules/9 Miscellaneous/9.4 Miscellaneous integration rules.m:Int[u_, x_] := CannotIntegrate[u, x]
Rubi/IntegrationRules/1 Algebraic functions/1.1 Binomial products/1.1.1 Linear/1.1.1.1 (a+b x)^m.m:Int[1/x_, x_Symbol] := Log[x]
Rubi/IntegrationRules/1 Algebraic functions/1.1 Binomial products/1.1.1 Linear/1.1.1.2 (a+b x)^m (c+d x)^n.m:(* IntLinearQ[a,b,c,d,m,n,x] returns True iff (a+b*x)^m*(c+d*x)^n is  integrable wrt x in terms of non-hypergeometric functions. *) IntLinearQ[a_, b_, c_, d_, m_, n_, x_] := IGtQ[m, 0] || IGtQ[n, 0] || IntegersQ[3*m, 3*n] || IntegersQ[4*m, 4*n] || IntegersQ[2*m, 6*n] || IntegersQ[6*m, 2*n] || ILtQ[m + n, -1] || IntegerQ[m + n] && RationalQ[m]
Rubi/IntegrationRules/1 Algebraic functions/1.1 Binomial products/1.1.3 General/1.1.3.4 (e x)^m (a+b x^n)^p (c+d x^n)^q.m:(* IntBinomialQ[a,b,c,d,e,m,n,p,q,x] returns True iff  (e*x)^m*(a+b*x^n)^p*(c+d*x^n)^q is integrable wrt x in terms of  non-Appell functions. *) IntBinomialQ[a_, b_, c_, d_, e_, m_, n_, p_, q_, x_Symbol] := IntegersQ[p, q] || IGtQ[p, 0] || IGtQ[q, 0] || EqQ[n, 2] && (IntegersQ[m, 2*p, 2*q] || IntegersQ[2*m, p, 2*q] || IntegersQ[2*m, 2*p, q]) || EqQ[n, 4] && (IntegersQ[m, p, 2*q] || IntegersQ[m, 2*p, q]) || EqQ[n, 2] && IntegersQ[m/2, p + 1/3, q] && (EqQ[b*c + 3*a*d, 0] || EqQ[b*c - 9*a*d, 0]) || EqQ[n, 2] && IntegersQ[m/2, q + 1/3, p] && (EqQ[a*d + 3*b*c, 0] || EqQ[a*d - 9*b*c, 0]) || EqQ[n, 3] && IntegersQ[(m - 1)/3, q, p - 1/2] && (EqQ[b*c - 4*a*d, 0] || EqQ[b*c + 8*a*d, 0] || EqQ[b^2*c^2 - 20*a*b*c*d - 8*a^2*d^2, 0]) || EqQ[n, 3] && IntegersQ[(m - 1)/3, p, q - 1/2] && (EqQ[4*b*c - a*d, 0] || EqQ[8*b*c + a*d, 0] || EqQ[8*b^2*c^2 + 20*a*b*c*d - a^2*d^2, 0])
Rubi/IntegrationRules/1 Algebraic functions/1.1 Binomial products/1.1.3 General/1.1.3.3 (a+b x^n)^p (c+d x^n)^q.m:(* IntBinomialQ[a,b,c,d,n,p,q,x] returns True iff  (a+b*x^n)^p*(c+d*x^n)^q is integrable wrt x in terms of non-Appell  functions. *) IntBinomialQ[a_, b_, c_, d_, n_, p_, q_, x_Symbol] := IntegersQ[p, q] || IGtQ[p, 0] || IGtQ[q, 0] || (EqQ[n, 2] || EqQ[n, 4]) && (IntegersQ[p, 4*q] || IntegersQ[4*p, q]) || EqQ[n, 2] && (IntegersQ[2*p, 2*q] || IntegersQ[3*p, q] && EqQ[b*c + 3*a*d, 0] || IntegersQ[p, 3*q] && EqQ[3*b*c + a*d, 0])
Rubi/IntegrationRules/1 Algebraic functions/1.1 Binomial products/1.1.3 General/1.1.3.2 (c x)^m (a+b x^n)^p.m:(* IntBinomialQ[a,b,c,n,m,p,x] returns True iff (c*x)^m*(a+b*x^n)^p  is integrable wrt x in terms of non-hypergeometric functions. *) IntBinomialQ[a_, b_, c_, n_, m_, p_, x_] := IGtQ[p, 0] || RationalQ[m] && IntegersQ[n, 2*p] || IntegerQ[(m + 1)/n + p] || (EqQ[n, 2] || EqQ[n, 4]) && IntegersQ[2*m, 4*p] || EqQ[n, 2] && IntegerQ[6*p] && (IntegerQ[m] || IntegerQ[m - p])
Rubi/IntegrationRules/1 Algebraic functions/1.2 Trinomial products/1.2.1 Quadratic/1.2.1.2 (d+e x)^m (a+b x+c x^2)^p.m:(* IntQuadraticQ[a,b,c,d,e,m,p,x] returns True iff  (d+e*x)^m*(a+b*x+c*x^2)^p is integrable wrt x in terms of non-Appell  functions. *) IntQuadraticQ[a_, b_, c_, d_, e_, m_, p_, x_] := IntegerQ[p] || IGtQ[m, 0] || IntegersQ[2*m, 2*p] || IntegersQ[m, 4*p] || IntegersQ[m, p + 1/3] && (EqQ[c^2*d^2 - b*c*d*e + b^2*e^2 - 3*a*c*e^2, 0] || EqQ[c^2*d^2 - b*c*d*e - 2*b^2*e^2 + 9*a*c*e^2, 0])
Rubi/IntegrationRules/3 Logarithms/3.5 Miscellaneous logarithms.m:Int[u_.*Log[Gamma[v_]], x_Symbol] := (Log[Gamma[v]] - LogGamma[v])*Int[u, x] + Int[u*LogGamma[v], x]
Rubi/RubiPackageTools.m:BuildIntegrationRules[] := BuildIntegrationRules[#, FileNameJoin[{$dir, "IntegrationRules"}]]& /@ FileNames["*.nb", {$ruleDir}, Infinity];
Rubi/ShowStepFormatting.m:Unprotect[Int]; Format[HoldPattern[Int[expr_, x_]], TraditionalForm] := HoldForm[Integrate[expr, x]];
Rubi/ShowStepFormatting.m:FormatRubiStep[RubiIntermediateResult[HoldComplete[expr_]]] := (Item[
Rubi/IntegrationUtilityFunctions.m:HalfIntegerQ[u__] := Scan[Function[If[Head[#]===Rational && Denominator[#]==2,Null,Return[False]]],{u}]===Null
Rubi/IntegrationUtilityFunctions.m:ExpandIntegrand[u_,x_Symbol] := u
Rubi/IntegrationUtilityFunctions.m:FixIntRules[rulelist_] := Block[{Int, Subst, Simp, Dist},
Rubi/Rubi.m:Steps[Int[expr_, x_], opts : OptionsPattern[]] := Steps[Int[expr, x], $IterationLimit, opts];
Rubi/Rubi.m:Steps[Int[expr_, x_], n_Integer, OptionsPattern[]] := Module[{result, steps},
Rubi/Rubi.m:Step[Int[expr_, x_], OptionsPattern[]] := Module[
Rubi/Rubi.m:Stats[Int[expr_, x_], OptionsPattern[]] := Block[{$ShowSteps = False, $StepCounter = 0, $RuleList = {}},
Rubi/Rubi.m:Int[u_, {x_Symbol, a_, b_}] := With[{result = Int[u, x]}, Limit[result, x -> b] - Limit[result, x -> a]];
Rubi/Rubi.m:Int[{u__}, x_Symbol] := Map[Function[Int[#, x]], {u}];
Rubi/Rubi.m:CannotIntegrate[u_, x_] := Defer[Int][u, x];
